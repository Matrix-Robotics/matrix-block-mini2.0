Blockly.Arduino['procedures_defreturn'] = function(block) {
  // Define a procedure with a return value.
  const funcName =
      Blockly.Arduino.nameDBP_.getName(block.getFieldValue('NAME'), "PROCEDURE");
  let xfix1 = '';
  if (Blockly.Arduino.STATEMENT_PREFIX) {
    xfix1 += Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_PREFIX, block);
  }
  if (Blockly.Arduino.STATEMENT_SUFFIX) {
    xfix1 += Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_SUFFIX, block);
  }
  if (xfix1) {
    xfix1 = Blockly.Arduino.prefixLines(xfix1, Blockly.Arduino.INDENT);
  }
  let loopTrap = '';
  if (Blockly.Arduino.INFINITE_LOOP_TRAP) {
    loopTrap = Blockly.Arduino.prefixLines(
        Blockly.Arduino.injectId(Blockly.Arduino.INFINITE_LOOP_TRAP, block), Blockly.Arduino.INDENT);
  }
  let branch = Blockly.Arduino.statementToCode(block, 'STACK');
  let returnValue = Blockly.Arduino.valueToCode(block, 'RETURN', Blockly.Arduino.ORDER_NONE) || '';
  let xfix2 = '';
  if (branch && returnValue) {
    // After executing the function body, revisit this block for the return.
    xfix2 = xfix1;
  }
  if (returnValue) {
    returnValue = Blockly.Arduino.INDENT + 'return ' + returnValue + '\n';
  } else if (!branch) {
    branch = '';
  }
  const args = [];
  const variables = block.getVars();
  for (let i = 0; i < variables.length; i++) {
    args[i] = Blockly.Arduino.nameDBP_.getName(variables[i], "VARIABLE");
  }
  let code = 'function ' + funcName + '(' + args.join(', ') + ')\n' + xfix1 +
      loopTrap + branch + xfix2 + returnValue + 'end\n';
  code = Blockly.Arduino.scrub_(block, code);
  // Add % so as not to collide with helper functions in definitions list.
  Blockly.Arduino.definitions_['%' + funcName] = code;
  return null;
};

// Defining a procedure without a return value uses the same generator as
// a procedure with a return value.
Blockly.Arduino['procedures_defnoreturn'] = Blockly.Arduino['procedures_defreturn'];

Blockly.Arduino['procedures_callreturn'] = function(block) {
  // Call a procedure with a return value.
  const funcName =
      Blockly.Arduino.nameDBP_.getName(block.getFieldValue('NAME'), "PROCEDURE");
  const args = [];
  const variables = block.getVars();
  for (let i = 0; i < variables.length; i++) {
    args[i] = Blockly.Arduino.valueToCode(block, 'ARG' + i, Blockly.Arduino.ORDER_NONE) || 'nil';
  }
  const code = funcName + '(' + args.join(', ') + ')';
  return [code, Blockly.Arduino.ORDER_HIGH];
};

Blockly.Arduino['procedures_callnoreturn'] = function(block) {
  // Call a procedure with no return value.
  // Generated code is for a function call as a statement is the same as a
  // function call as a value, with the addition of line ending.
  const tuple = Blockly.Arduino['procedures_callreturn'](block);
  return tuple[0] + '\n';
};

Blockly.Arduino['procedures_ifreturn'] = function(block) {
  // Conditionally return value from a procedure.
  const condition =
      Blockly.Arduino.valueToCode(block, 'CONDITION', Blockly.Arduino.ORDER_NONE) || 'false';
  let code = 'if ' + condition + ' then\n';
  if (Blockly.Arduino.STATEMENT_SUFFIX) {
    // Inject any statement suffix here since the regular one at the end
    // will not get executed if the return is triggered.
    code +=
        Blockly.Arduino.prefixLines(Blockly.Arduino.injectId(Blockly.Arduino.STATEMENT_SUFFIX, block), Blockly.Arduino.INDENT);
  }
  if (block.hasReturnValue_) {
    const value = Blockly.Arduino.valueToCode(block, 'VALUE', Blockly.Arduino.ORDER_NONE) || 'nil';
    code += Blockly.Arduino.INDENT + 'return ' + value + '\n';
  } else {
    code += Blockly.Arduino.INDENT + 'return\n';
  }
  code += 'end\n';
  return code;
};

// Blockly.Arduino['procedures_prototype'] = function(block) {
//   console.log("procedures_prototype",block);
  
//   return code;
// };